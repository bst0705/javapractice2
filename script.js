/*モジュール(jsフォルダ)の組み合わせ
  ファイルを分割したときのエラーは、それぞれのファイルを関連づけし、必要な値を渡すことで解決できます。
  クラスの定義の後で「export default クラス名」とすることで、そのクラスをエクスポート（出力）し、他のファイルへ渡すことができます。
  他のファイルで定義されているクラスを使用するにはインポート（読込）をする必要があります。使用するファイルの先頭で「import クラス名 from "./ファイル名"」と書くことでインポートすることができます。
  なお、ファイル名の拡張子の「.js」は省略することができます。
  
 エクスポートできるのはクラスだけではありません。文字列や数値や関数など、どんな値でもエクスポートが可能です。
 エクスポートする際は、下図のように「export default 定数名」とします。インポートする際は「import 定数名 from "./ファイル名"」とします。

デフォルトexport
  export defaultはデフォルトエクスポートと呼ばれ、そのファイルがインポートされると自動的に「export default 値」の値がインポートされます。そのためエクスポート時の値の名前と、インポート時の値の名前に違いがあっても問題ありません。
  デフォルトエクスポートは1ファイル1つの値のみ使えます。このファイルをインポートする際には、デフォルトエクスポートの値を自動でインポートするため、値が1つのみとなっています。
  複数の値をエクスポートしたい場合は、「名前付きエクスポート」を用います。
  名前付きエクスポートとは左の図のように、defaultを書かずに、名前を{}で囲んでエクスポートする書き方です。

  名前付きエクスポートした値をインポートする場合は、エクスポート時と同じ名前で値を指定します。インポートする値は、エクスポート時と同様に、
  「import { 値の名前 } from "./ファイル名"」と{}で囲んで指定します。
  名前付きエクスポートは、デフォルトエクスポートと違い、複数の定数やクラスを指定してエクスポートが出来ます。
  また、左の図のように、「export { 名前1, 名前2 }」という形で書くことにより、1つのファイルから複数のエクスポートが出来ます。
  インポートの際も、コンマで区切ることで複数のインポートができます。

パッケージ
  
*/

  import {dog1,dog2} from "./dogData.js";
  dog1.info();
  console.log("------------------");
  dog2.info();
